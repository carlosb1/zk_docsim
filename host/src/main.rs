use std::fs;
// These constants represent the RISC-V ELF and the image ID generated by risc0-build.
// The ELF is used for proving and the ID is used for verification.
use methods::{
    GUEST_CODE_FOR_ZK_PROOF_ELF, GUEST_CODE_FOR_ZK_PROOF_ID
};
use risc0_zkvm::{ProveInfo, Receipt};
use risc0_zkvm::{default_prover, ExecutorEnv};
use sha2::{Digest, Sha256};
use hex;
use host::execute_prove;

fn main() {
    // Initialize tracing. In order to view logs, run `RUST_LOG=info cargo run`
    tracing_subscriber::fmt()
        .with_env_filter(tracing_subscriber::filter::EnvFilter::from_default_env())
        .init();

    // An executor environment describes the configurations for the zkVM
    // including program inputs.
    // A default ExecutorEnv can be created like so:
    // `let env = ExecutorEnv::builder().build().unwrap();`
    // However, this `env` does not have any inputs.
    //
    // To add guest input to the executor environment, use
    // ExecutorEnvBuilder::write().
    // To access this method, you'll need to use ExecutorEnv::builder(), which
    // creates an ExecutorEnvBuilder. When you're done adding input, call
    // ExecutorEnvBuilder::build().

    // For example:
    /* add input for circuit */
    let input: (Vec<f32>, Vec<f32>) = (vec![0.1, 0.8, 0.3], vec![0.2, 0.9, 0.1]);

    let prove_info = execute_prove(input.0, input.1);

    // extract the receipt.
    let receipt = prove_info.receipt;
    let bytes = bincode::serialize(&receipt).unwrap();

    //fs::write("receipt.bin", bytes.clone()).unwrap();
    fs::write("web/receipt.bin", bytes.clone()).unwrap();

    let hash = Sha256::digest(&bytes.clone());
    println!("SHA256: {}", hex::encode(hash));

    println!("receipt={:?}", receipt);
    // TODO: Implement code for retrieving receipt journal here.

    let new_receipt: Receipt = bincode::deserialize(bytes.as_slice()).unwrap();

    // For example:
    let _output: u32 = new_receipt.journal.decode().unwrap();


    // The receipt was verified at the end of proving, but the below code is an
    // example of how someone else could verify this receipt.
    new_receipt
        .verify(GUEST_CODE_FOR_ZK_PROOF_ID)
        .unwrap();
}


